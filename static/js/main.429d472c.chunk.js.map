{"version":3,"sources":["Photo.js","App.js","index.js"],"names":["Photo","user","name","portfolio_url","medium","profile_image","img","urls","regular","likes","alt_description","className","src","alt","href","clientID","App","useState","photos","setPhotos","loading","setLoading","query","setQuery","loadingContainer","useRef","searchContainer","useEffect","url","pageParam","length","pageQuery","fetch","then","res","json","results","document","addEventListener","current","getBoundingClientRect","top","window","innerHeight","onSubmit","e","preventDefault","value","type","placeholder","ref","map","photo","key","id","ReactDOM","render","getElementById"],"mappings":"kMA4BeA,EA1BD,SAAC,GASR,IAAD,IARJC,KACEC,EAOE,EAPFA,KACAC,EAME,EANFA,cACiBC,EAKf,EALFC,cAAiBD,OAEFE,EAGb,EAHJC,KAAQC,QACRC,EAEI,EAFJA,MACAC,EACI,EADJA,gBAEA,OACE,6BAASC,UAAU,SACjB,yBAAKC,IAAKN,EAAKO,IAAKH,IACpB,yBAAKC,UAAU,cACb,6BACE,4BAAKT,GACL,2BAAIO,EAAJ,WAEF,uBAAGK,KAAMX,GACP,yBAAKS,IAAKR,GAAU,KAAMS,IAAI,GAAGF,UAAU,iBCjB/CI,EAAQ,yDA8FCC,MA1Ff,WAAe,MAEaC,mBAAS,IAFtB,mBAERC,EAFQ,KAEAC,EAFA,OAGeF,oBAAS,GAHxB,mBAGRG,EAHQ,KAGCC,EAHD,OAIWJ,mBAAS,IAJpB,mBAIRK,EAJQ,KAIDC,EAJC,KAOTC,EAAmBC,iBAAO,MAC1BC,EAAkBD,iBAAO,MAqD7B,OAnCAE,qBAAU,WACR,IACIC,EADAC,EAAS,eAAWX,EAAOY,OAAS,GAAK,GAI7C,GAAIV,EAAS,CAEX,GAAIE,EAAO,CACT,IAAIS,EAAS,gBAAYT,GACzBM,EArCO,0CAqCWb,EAAW,IAAMc,EAAY,IAAME,OAErDH,EAxCK,mCAwCWb,EAAW,IAAMc,EAEnCG,MAAMJ,GACHK,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAEDZ,IACFY,EAAMA,EAAIE,SAEZjB,EAAU,GAAD,mBAAKD,GAAL,YAAgBgB,KACzBb,GAAW,SAGhB,CAACD,IAEJO,qBAAU,WAERU,SAASC,iBAAiB,UAAU,WACjBd,EAAiBe,QA3ClBC,wBACPC,IAAMC,OAAOC,aA2CpBtB,GAAW,QAGd,IAGD,8BACE,6BAASV,UAAU,UACjB,0BAAMA,UAAU,cAAciC,SAhDpC,SAAsBC,GAGpBA,EAAEC,iBACFvB,EAASG,EAAgBa,QAAQQ,OACjC1B,GAAW,GACXF,EAAU,MA2CJ,2BACE6B,KAAK,OACLC,YAAY,SACZtC,UAAU,aACVuC,IAAKxB,IAEP,4BAAQsB,KAAK,SAASrC,UAAU,cAC9B,kBAAC,IAAD,SAIN,6BAASA,UAAU,UACjB,yBAAKA,UAAU,iBACZO,EAAOiC,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAOC,IAAKD,EAAME,IAAQF,QAG9B,wBAAIzC,UAAU,UAAUuC,IAAK1B,GAA7B,iBCrFR+B,IAASC,OACP,oCACE,kBAAC,EAAD,OAEFnB,SAASoB,eAAe,U","file":"static/js/main.429d472c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Photo = ({\r\n  user: {\r\n    name,\r\n    portfolio_url,\r\n    profile_image: { medium },\r\n  },\r\n  urls: { regular: img },\r\n  likes,\r\n  alt_description,\r\n}) => {\r\n  return (\r\n    <article className=\"photo\">\r\n      <img src={img} alt={alt_description} />\r\n      <div className=\"photo-info\">\r\n        <div>\r\n          <h4>{name}</h4>\r\n          <p>{likes} likes</p>\r\n        </div>\r\n        <a href={portfolio_url}>\r\n          <img src={medium || null} alt=\"\" className=\"user-img\" />\r\n        </a>\r\n      </div>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default Photo;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { FaSearch } from 'react-icons/fa';\r\nimport Photo from './Photo';\r\n\r\nconst clientID = `?client_id=uiR-LyGL9lTUPvNHL_ZDC9bJ038rc-9afAXS9t_9Zt4`;\r\nconst mainUrl = `https://api.unsplash.com/photos/`;\r\nconst searchUrl = `https://api.unsplash.com/search/photos/`;\r\n\r\nfunction App() {\r\n  // states\r\n  let [photos, setPhotos] = useState([]);\r\n  let [loading, setLoading] = useState(true);\r\n  let [query, setQuery] = useState('');\r\n\r\n  // refs\r\n  let loadingContainer = useRef(null);\r\n  let searchContainer = useRef(null);\r\n\r\n  // helper functions\r\n  function isInViewport(element) {\r\n    let rec = element.getBoundingClientRect();\r\n    return rec.top < window.innerHeight;\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    // when searching setQuery to searched text\r\n    // and clear photos and begin loading\r\n    e.preventDefault();\r\n    setQuery(searchContainer.current.value);\r\n    setLoading(true);\r\n    setPhotos([]);\r\n  }\r\n\r\n  // effects\r\n  useEffect(() => {\r\n    let pageParam = `page=${photos.length / 10 + 1}`;\r\n    let url;\r\n\r\n    // only get new photos in loading state\r\n    if (loading) {\r\n      // if query use search link and if not use main link\r\n      if (query) {\r\n        let pageQuery = `query=${query}`;\r\n        url = searchUrl + clientID + '&' + pageParam + '&' + pageQuery;\r\n      } else {\r\n        url = mainUrl + clientID + '&' + pageParam;\r\n      }\r\n      fetch(url)\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          // search link response is different from main link response\r\n          if (query) {\r\n            res = res.results\r\n          }\r\n          setPhotos([...photos, ...res]);\r\n          setLoading(false);\r\n        });\r\n    }\r\n  }, [loading]);\r\n\r\n  useEffect(() => {\r\n    // begin loading new photos if loading element in viewport\r\n    document.addEventListener('scroll', () => {\r\n      if (isInViewport(loadingContainer.current)) {\r\n        setLoading(true);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <main>\r\n      <section className=\"search\">\r\n        <form className=\"search-form\" onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"search\"\r\n            className=\"form-input\"\r\n            ref={searchContainer}\r\n          />\r\n          <button type=\"submit\" className=\"submit-btn\">\r\n            <FaSearch />\r\n          </button>\r\n        </form>\r\n      </section>\r\n      <section className=\"photos\">\r\n        <div className=\"photos-center\">\r\n          {photos.map((photo) => (\r\n            <Photo key={photo.id} {...photo} />\r\n          ))}\r\n        </div>\r\n        <h2 className=\"loading\" ref={loadingContainer}>\r\n          Loading...\r\n        </h2>\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}